// @ts-nocheck

/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RecordCreateInput,
  RecordUpdateHoursInput,
  RecordUpdateInput,
  RecordUpdateOrderInput,
  ResponseRecordRecordErrorCode,
} from '../models/index';
import {
    RecordCreateInputFromJSON,
    RecordCreateInputToJSON,
    RecordUpdateHoursInputFromJSON,
    RecordUpdateHoursInputToJSON,
    RecordUpdateInputFromJSON,
    RecordUpdateInputToJSON,
    RecordUpdateOrderInputFromJSON,
    RecordUpdateOrderInputToJSON,
    ResponseRecordRecordErrorCodeFromJSON,
    ResponseRecordRecordErrorCodeToJSON,
} from '../models/index';

export interface DeleteRequest {
    id: string;
}

export interface CreateRequest {
    recordCreateInput: RecordCreateInput;
}

export interface UpdateRequest {
    id: string;
    recordUpdateInput: RecordUpdateInput;
}

export interface UpdateHoursRequest {
    id: string;
    recordUpdateHoursInput: RecordUpdateHoursInput;
}

export interface UpdateOrderRequest {
    id: string;
    recordUpdateOrderInput: RecordUpdateOrderInput;
}

/**
 * 
 */
export class RecordControllerApi extends runtime.BaseAPI {

    /**
     */
    async _deleteRaw(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseRecordRecordErrorCode>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling _delete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/records/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseRecordRecordErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async _delete(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseRecordRecordErrorCode> {
        const response = await this._deleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseRecordRecordErrorCode>> {
        if (requestParameters['recordCreateInput'] == null) {
            throw new runtime.RequiredError(
                'recordCreateInput',
                'Required parameter "recordCreateInput" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/records`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecordCreateInputToJSON(requestParameters['recordCreateInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseRecordRecordErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseRecordRecordErrorCode> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRaw(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseRecordRecordErrorCode>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling update().'
            );
        }

        if (requestParameters['recordUpdateInput'] == null) {
            throw new runtime.RequiredError(
                'recordUpdateInput',
                'Required parameter "recordUpdateInput" was null or undefined when calling update().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/records/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecordUpdateInputToJSON(requestParameters['recordUpdateInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseRecordRecordErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async update(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseRecordRecordErrorCode> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateHoursRaw(requestParameters: UpdateHoursRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseRecordRecordErrorCode>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateHours().'
            );
        }

        if (requestParameters['recordUpdateHoursInput'] == null) {
            throw new runtime.RequiredError(
                'recordUpdateHoursInput',
                'Required parameter "recordUpdateHoursInput" was null or undefined when calling updateHours().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/records/{id}/hours`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecordUpdateHoursInputToJSON(requestParameters['recordUpdateHoursInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseRecordRecordErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async updateHours(requestParameters: UpdateHoursRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseRecordRecordErrorCode> {
        const response = await this.updateHoursRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateOrderRaw(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseRecordRecordErrorCode>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateOrder().'
            );
        }

        if (requestParameters['recordUpdateOrderInput'] == null) {
            throw new runtime.RequiredError(
                'recordUpdateOrderInput',
                'Required parameter "recordUpdateOrderInput" was null or undefined when calling updateOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/records/{id}/previous`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecordUpdateOrderInputToJSON(requestParameters['recordUpdateOrderInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseRecordRecordErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async updateOrder(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseRecordRecordErrorCode> {
        const response = await this.updateOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
