// @ts-nocheck

/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExportDeleteInput,
  ExportNameUpdateInput,
  PageResponseExportExportErrorCode,
  ResponseExportDeletePayloadExportErrorCode,
  ResponseExportDownloadPayloadExportErrorCode,
  ResponseExportExportErrorCode,
} from '../models/index';
import {
    ExportDeleteInputFromJSON,
    ExportDeleteInputToJSON,
    ExportNameUpdateInputFromJSON,
    ExportNameUpdateInputToJSON,
    PageResponseExportExportErrorCodeFromJSON,
    PageResponseExportExportErrorCodeToJSON,
    ResponseExportDeletePayloadExportErrorCodeFromJSON,
    ResponseExportDeletePayloadExportErrorCodeToJSON,
    ResponseExportDownloadPayloadExportErrorCodeFromJSON,
    ResponseExportDownloadPayloadExportErrorCodeToJSON,
    ResponseExportExportErrorCodeFromJSON,
    ResponseExportExportErrorCodeToJSON,
} from '../models/index';

export interface DeleteExportRequest {
    id: string;
}

export interface DeleteExportsRequest {
    exportDeleteInput: ExportDeleteInput;
}

export interface DownloadExportRequest {
    id: string;
}

export interface GetExportsRequest {
    limit: number;
    offset: number;
    name?: string;
}

export interface UpdateExportNameRequest {
    id: string;
    exportNameUpdateInput: ExportNameUpdateInput;
}

/**
 * 
 */
export class ExportControllerApi extends runtime.BaseAPI {

    /**
     */
    async deleteExportRaw(requestParameters: DeleteExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseExportDeletePayloadExportErrorCode>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseExportDeletePayloadExportErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async deleteExport(requestParameters: DeleteExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseExportDeletePayloadExportErrorCode> {
        const response = await this.deleteExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteExportsRaw(requestParameters: DeleteExportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseExportDeletePayloadExportErrorCode>> {
        if (requestParameters['exportDeleteInput'] == null) {
            throw new runtime.RequiredError(
                'exportDeleteInput',
                'Required parameter "exportDeleteInput" was null or undefined when calling deleteExports().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/exports/bulk`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ExportDeleteInputToJSON(requestParameters['exportDeleteInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseExportDeletePayloadExportErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async deleteExports(requestParameters: DeleteExportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseExportDeletePayloadExportErrorCode> {
        const response = await this.deleteExportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async downloadExportRaw(requestParameters: DownloadExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseExportDownloadPayloadExportErrorCode>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling downloadExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseExportDownloadPayloadExportErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async downloadExport(requestParameters: DownloadExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseExportDownloadPayloadExportErrorCode> {
        const response = await this.downloadExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getExportsRaw(requestParameters: GetExportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageResponseExportExportErrorCode>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling getExports().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling getExports().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageResponseExportExportErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async getExports(requestParameters: GetExportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageResponseExportExportErrorCode> {
        const response = await this.getExportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateExportNameRaw(requestParameters: UpdateExportNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseExportExportErrorCode>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateExportName().'
            );
        }

        if (requestParameters['exportNameUpdateInput'] == null) {
            throw new runtime.RequiredError(
                'exportNameUpdateInput',
                'Required parameter "exportNameUpdateInput" was null or undefined when calling updateExportName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/exports/{id}/name`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExportNameUpdateInputToJSON(requestParameters['exportNameUpdateInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseExportExportErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async updateExportName(requestParameters: UpdateExportNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseExportExportErrorCode> {
        const response = await this.updateExportNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
